/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package garits.franchisee.reports;

import com.itextpdf.text.Document;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;
import garits.DBConnectivity.DBConnection;
import garits.franchisee.Reports;
import java.io.FileOutputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.LinkedList;
import java.util.List;
import javax.swing.JFrame;

/**
 *
 * @author shazidtipu
 */
public class JobReport extends javax.swing.JFrame {

    /**
     * Creates new form FranchiseeJobReport
     */
    public JobReport() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        backButotn = new javax.swing.JButton();
        startDateLabel = new javax.swing.JLabel();
        generateButton = new javax.swing.JButton();
        endDateLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        label2 = new java.awt.Label();
        startDateField = new javax.swing.JTextField();
        endDateField = new javax.swing.JTextField();
        printButton = new javax.swing.JButton();
        jobTypeBox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        priceLabel = new javax.swing.JLabel();
        timeLabel = new javax.swing.JLabel();
        mechanicBox = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        backButotn.setText("Back");
        backButotn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButotnActionPerformed(evt);
            }
        });

        startDateLabel.setText("Start Date");

        generateButton.setText("Generate Report ");
        generateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateButtonActionPerformed(evt);
            }
        });

        endDateLabel.setText("End Date");

        jPanel2.setBackground(new java.awt.Color(51, 51, 51));
        jPanel2.setPreferredSize(new java.awt.Dimension(1920, 100));

        label2.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 36)); // NOI18N
        label2.setForeground(new java.awt.Color(255, 255, 255));
        label2.setText("GARITS");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(846, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        startDateField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startDateFieldActionPerformed(evt);
            }
        });

        printButton.setText("Print Report");
        printButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printButtonActionPerformed(evt);
            }
        });

        jobTypeBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "MOT", "Annual Service", "Repair" }));
        jobTypeBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jobTypeBoxActionPerformed(evt);
            }
        });

        jLabel1.setText("Job Type");

        priceLabel.setText("Average Price: ");

        timeLabel.setText("Average Time Taken: ");

        mechanicBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "2222", "5555", "6666" }));
        mechanicBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mechanicBoxActionPerformed(evt);
            }
        });

        jLabel5.setText("Mechanic");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(220, 220, 220)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(startDateField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(startDateLabel))
                .addGap(71, 71, 71)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(endDateField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(endDateLabel))
                .addGap(66, 66, 66)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jobTypeBox, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mechanicBox, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addGap(311, 311, 311))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(backButotn))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 1033, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(292, 292, 292)
                        .addComponent(priceLabel)
                        .addGap(226, 226, 226)
                        .addComponent(timeLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(360, 360, 360)
                        .addComponent(generateButton)
                        .addGap(50, 50, 50)
                        .addComponent(printButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 19, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(backButotn)
                                .addContainerGap())
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(144, 144, 144)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(priceLabel)
                                    .addComponent(timeLabel))
                                .addGap(125, 125, 125)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(printButton)
                                    .addComponent(generateButton))
                                .addGap(98, 98, 98))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(startDateLabel)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(startDateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jobTypeBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(endDateLabel)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(endDateField, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(mechanicBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backButotnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButotnActionPerformed
        // TODO add your handling code here:
        this.dispose();
        JFrame frame = new Reports();
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
    }//GEN-LAST:event_backButotnActionPerformed

    private void generateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateButtonActionPerformed
        // TODO add your handling code here:
        String jobType = jobTypeBox.getSelectedItem().toString();
        String mechanic = mechanicBox.getSelectedItem().toString();
        String startDate = startDateField.getText();
        String endDate = endDateField.getText();
        
        List<String> totalList = new LinkedList<String>();
        List<String> timeList = new LinkedList<String>();
        
        double totalTime = 0;
        double totalPrice = 0;
        
        double averageTime = 0;
        double averagePrice = 0;
        
        String byJobAndMechanicQuery = "SELECT grandTotal, totalTimeTaken FROM Invoice INNER JOIN JobSheet ON Invoice.jobNumber = JobSheet.jobNumber WHERE dateOfInvoice BETWEEN ? AND ? AND JobSheet.EmployeeemployeeID = ? AND JobSheet.jobtype = ?";
        String byJobQuery = "SELECT grandTotal, totalTimeTaken FROM Invoice INNER JOIN JobSheet ON Invoice.jobNumber = JobSheet.jobNumber WHERE dateOfInvoice BETWEEN ? AND ? AND JobSheet.jobtype = ?";
        String byMechanicQuery = "SELECT grandTotal, totalTimeTaken FROM Invoice INNER JOIN JobSheet ON Invoice.jobNumber = JobSheet.jobNumber WHERE dateOfInvoice BETWEEN ? AND ? AND JobSheet.EmployeeemployeeID = ?";
        String query = "SELECT grandTotal, totalTimeTaken FROM Invoice WHERE dateOfInvoice BETWEEN ? AND ?";
        
        try {
            
            Connection connection = DBConnection.getConnection();
            
            if (jobType.equals("All") && mechanic.equals("All")) {
                PreparedStatement pStatement = connection.prepareStatement(query);
                pStatement.setString(1, startDate);
                pStatement.setString(2, endDate);
                ResultSet rSet = pStatement.executeQuery();
                
                while (rSet.next()) {
                    totalList.add(rSet.getString("grandTotal"));
                    timeList.add(rSet.getString("totalTimeTaken"));
                }
                
                for (int i = 0; i < totalList.size(); i++) {
                    totalPrice = totalPrice + Double.parseDouble(totalList.get(i));
                }
                
                for (int i = 0; i < timeList.size(); i++) {
                    totalTime = totalTime + Double.parseDouble(timeList.get(i));
                }
                
                averagePrice = totalPrice / totalList.size();
                averageTime = totalTime / timeList.size();
                
                priceLabel.setText("Average Price: £" + averagePrice);
                timeLabel.setText("Average Time: " + averageTime + " hours");
                
            } else if (jobType.equals("All") && !mechanic.equals("All")) {
                
                PreparedStatement pStatement = connection.prepareStatement(byMechanicQuery);
                pStatement.setString(1, startDate);
                pStatement.setString(2, endDate);
                pStatement.setString(3, mechanic);
                ResultSet rSet = pStatement.executeQuery();
                
                while (rSet.next()) {
                    totalList.add(rSet.getString("grandTotal"));
                    timeList.add(rSet.getString("totalTimeTaken"));
                }
                
                for (int i = 0; i < totalList.size(); i++) {
                    totalPrice = totalPrice + Double.parseDouble(totalList.get(i));
                }
                
                for (int i = 0; i < timeList.size(); i++) {
                    totalTime = totalTime + Double.parseDouble(timeList.get(i));
                }
                
                averagePrice = totalPrice / totalList.size();
                averageTime = totalTime / timeList.size();
                
                priceLabel.setText("Average Price: £" + averagePrice);
                timeLabel.setText("Average Time: " + averageTime + " hours");
                
            } else if (!jobType.equals("All") && mechanic.equals("All")) {
                
                PreparedStatement pStatement = connection.prepareStatement(byJobQuery);
                pStatement.setString(1, startDate);
                pStatement.setString(2, endDate);
                pStatement.setString(3, jobType);
                ResultSet rSet = pStatement.executeQuery();
                
                while (rSet.next()) {
                    totalList.add(rSet.getString("grandTotal"));
                    timeList.add(rSet.getString("totalTimeTaken"));
                }
                
                for (int i = 0; i < totalList.size(); i++) {
                    totalPrice = totalPrice + Double.parseDouble(totalList.get(i));
                }
                
                for (int i = 0; i < timeList.size(); i++) {
                    totalTime = totalTime + Double.parseDouble(timeList.get(i));
                }
                
                averagePrice = totalPrice / totalList.size();
                averageTime = totalTime / timeList.size();
                
                priceLabel.setText("Average Price: £" + averagePrice);
                timeLabel.setText("Average Time: " + averageTime + " hours");

                
            } else if (!jobType.equals("All") && !mechanic.equals("All")) {
                
                PreparedStatement pStatement = connection.prepareStatement(byJobAndMechanicQuery);
                pStatement.setString(1, startDate);
                pStatement.setString(2, endDate);
                pStatement.setString(3, mechanic);
                pStatement.setString(4, jobType);
                
                ResultSet rSet = pStatement.executeQuery();
                
                while (rSet.next()) {
                    totalList.add(rSet.getString("grandTotal"));
                    timeList.add(rSet.getString("totalTimeTaken"));
                }
                
                for (int i = 0; i < totalList.size(); i++) {
                    totalPrice = totalPrice + Double.parseDouble(totalList.get(i));
                }
                
                for (int i = 0; i < timeList.size(); i++) {
                    totalTime = totalTime + Double.parseDouble(timeList.get(i));
                }
                
                averagePrice = totalPrice / totalList.size();
                averageTime = totalTime / timeList.size();
                
                priceLabel.setText("Average Price: £" + averagePrice);
                timeLabel.setText("Average Time: " + averageTime + " hours");
                
            }
            
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_generateButtonActionPerformed

    private void startDateFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startDateFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_startDateFieldActionPerformed

    private void printButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printButtonActionPerformed
        // TODO add your handling code here:
        try {
            
            Document document = new Document();
            PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream("JobReport.pdf"));
            document.open();
            
            document.add(new Paragraph("Job Report"));
            document.add(new Paragraph(""));
            document.add(new Paragraph(""));
            document.add(new Paragraph(""));
            document.add(new Paragraph("Report start date: " + startDateField.getText()));
            document.add(new Paragraph(""));
            document.add(new Paragraph("Report end date: " + endDateField.getText()));
            document.add(new Paragraph(""));
            document.add(new Paragraph("Job Type: " + jobTypeBox.getSelectedItem().toString()));
            document.add(new Paragraph(""));
            document.add(new Paragraph("Customer Type: " + mechanicBox.getSelectedItem().toString()));
            document.add(new Paragraph(""));
            document.add(new Paragraph(""));
            document.add(new Paragraph(priceLabel.getText()));
            document.add(new Paragraph(timeLabel.getText()));
            
            document.close();
            writer.close();
            
            
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_printButtonActionPerformed

    private void jobTypeBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jobTypeBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jobTypeBoxActionPerformed

    private void mechanicBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mechanicBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mechanicBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JobReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JobReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JobReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JobReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JobReport().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButotn;
    private javax.swing.JTextField endDateField;
    private javax.swing.JLabel endDateLabel;
    private javax.swing.JButton generateButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JComboBox<String> jobTypeBox;
    private java.awt.Label label2;
    private javax.swing.JComboBox<String> mechanicBox;
    private javax.swing.JLabel priceLabel;
    private javax.swing.JButton printButton;
    private javax.swing.JTextField startDateField;
    private javax.swing.JLabel startDateLabel;
    private javax.swing.JLabel timeLabel;
    // End of variables declaration//GEN-END:variables
}
