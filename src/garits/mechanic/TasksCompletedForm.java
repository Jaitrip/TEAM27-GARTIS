/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package garits.mechanic;

import garits.DBConnectivity.DBConnection;
import garits.Job.Invoice;
import garits.Job.ProduceInvoice;
import garits.Job.SaveInvoice;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ionut
 */
public class TasksCompletedForm extends javax.swing.JFrame {

    /**
     * Creates new form MechanicTasksCompletedForm
     */
    public TasksCompletedForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jRadioButtonMenuItem1 = new javax.swing.JRadioButtonMenuItem();
        jLabel1 = new javax.swing.JLabel();
        jobNumberField = new javax.swing.JTextField();
        backButton = new javax.swing.JButton();
        searchJobTasksButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jobTaskTable = new javax.swing.JTable();
        refreshTasksButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        timeTakenField = new javax.swing.JTextField();
        setTaskCompletedButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        label1 = new java.awt.Label();

        jRadioButtonMenuItem1.setSelected(true);
        jRadioButtonMenuItem1.setText("jRadioButtonMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel1.setText("Job Number");

        backButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/garits/ICONS/back-icon.png"))); // NOI18N
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        searchJobTasksButton.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        searchJobTasksButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/garits/ICONS/search-icon.png"))); // NOI18N
        searchJobTasksButton.setText("Search Job Tasks");
        searchJobTasksButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchJobTasksButtonActionPerformed(evt);
            }
        });

        jobTaskTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "JobSheetjobNumber", "taskID", "actualTime", "estimatedTime", "taskDescription", "status"
            }
        ));
        jScrollPane1.setViewportView(jobTaskTable);

        refreshTasksButton.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        refreshTasksButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/garits/ICONS/Refresh job list small-icon.png"))); // NOI18N
        refreshTasksButton.setText("Refresh Tasks");
        refreshTasksButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshTasksButtonActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel2.setText("Time Taken");

        setTaskCompletedButton.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        setTaskCompletedButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/garits/ICONS/set task comleted-icon.png"))); // NOI18N
        setTaskCompletedButton.setText("Set Task Completed");
        setTaskCompletedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setTaskCompletedButtonActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));
        jPanel1.setMinimumSize(new java.awt.Dimension(1920, 100));

        label1.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 36)); // NOI18N
        label1.setForeground(new java.awt.Color(255, 255, 255));
        label1.setText("GARITS");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(1733, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(backButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(refreshTasksButton)
                    .addComponent(jLabel2)
                    .addComponent(timeTakenField, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(setTaskCompletedButton)
                    .addComponent(jLabel1)
                    .addComponent(jobNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchJobTasksButton))
                .addGap(133, 133, 133)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1315, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(91, 91, 91))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(backButton)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(181, 181, 181)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(201, 201, 201)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jobNumberField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addComponent(searchJobTasksButton))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(102, 102, 102)
                                .addComponent(jLabel2)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(timeTakenField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)
                        .addComponent(setTaskCompletedButton)
                        .addGap(66, 66, 66)
                        .addComponent(refreshTasksButton)))
                .addGap(0, 347, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        this.dispose();
        JFrame frame = new MechanicHomePage();
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
    }//GEN-LAST:event_backButtonActionPerformed

    private void searchJobTasksButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchJobTasksButtonActionPerformed
        // TODO add your handling code here:
        String jobTaskNumber = jobNumberField.getText();

        try {

            Connection connection = DBConnection.getConnection();
            String sqlQuery = "SELECT * FROM JobTask WHERE JobSheetjobNumber = ?";
            PreparedStatement pStatement = connection.prepareStatement(sqlQuery);
            pStatement.setString(1, jobTaskNumber);
            ResultSet resultSet = pStatement.executeQuery();
            DefaultTableModel model = (DefaultTableModel) jobTaskTable.getModel();
            model.setRowCount(0);
            while (resultSet.next()) {
                Object o[] = {
                    resultSet.getString("JobSheetjobNumber"), resultSet.getString("taskID"), resultSet.getString("actualTime"), resultSet.getString("estimatedTime"), resultSet.getString("taskDescription"), resultSet.getString("status"),};
                model.addRow(o);

            }
            pStatement.close();
            resultSet.close();
            connection.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_searchJobTasksButtonActionPerformed

    private void refreshTasksButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshTasksButtonActionPerformed
        // TODO add your handling code here:
        try {

            Connection connection = DBConnection.getConnection();
            String sqlQuery = "SELECT * FROM JobTask WHERE JobSheetjobNumber = ?";
            PreparedStatement pStatement = connection.prepareStatement(sqlQuery);
            pStatement.setString(1, jobNumberField.getText());
            ResultSet resultSet = pStatement.executeQuery();
            DefaultTableModel model = (DefaultTableModel) jobTaskTable.getModel();
            model.setRowCount(0);
            while (resultSet.next()) {
                Object o[] = {
                    resultSet.getString("JobSheetjobNumber"), resultSet.getString("taskID"), resultSet.getString("actualTime"), resultSet.getString("estimatedTime"), resultSet.getString("taskDescription"), resultSet.getString("status"),};
                model.addRow(o);

            }
            pStatement.close();
            resultSet.close();
            connection.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_refreshTasksButtonActionPerformed

    private void setTaskCompletedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setTaskCompletedButtonActionPerformed
        // TODO add your handling code here:
        int jobRow = jobTaskTable.getSelectedRow();
        String jobNumber = jobTaskTable.getModel().getValueAt(jobRow, 0).toString();
        String taskID = jobTaskTable.getModel().getValueAt(jobRow, 1).toString();

        try {
            Connection connection = DBConnection.getConnection();
            connection.setAutoCommit(false);
            String sqlQuery = "UPDATE JobTask SET actualTime = ?, status = ? WHERE JobSheetjobNumber = ? AND taskID = ?";
            PreparedStatement pStatement = connection.prepareStatement(sqlQuery);
            pStatement.setString(1, timeTakenField.getText());
            pStatement.setString(2, "Completed");
            pStatement.setString(3, jobNumber);
            pStatement.setString(4, taskID);
            pStatement.executeUpdate();
            System.out.println("updated");
            connection.commit();
            pStatement.close();

            String checkCompleted = "SELECT COUNT(*) FROM JobTask WHERE status = ? AND JobSheetjobNumber = ?";
            PreparedStatement checkStatement = connection.prepareStatement(checkCompleted);

            checkStatement.setString(1, "Pending");
            checkStatement.setString(2, jobNumber);
            ResultSet resultSet = checkStatement.executeQuery();

            if (resultSet.getString("COUNT(*)").equals("0")) {
                System.out.println("job completed");
                String updateQuery = "UPDATE JobSheet SET status = ? WHERE jobNumber = ?";
                PreparedStatement updateStatement = connection.prepareStatement(updateQuery);
                updateStatement.setString(1, "Completed");
                updateStatement.setString(2, jobNumber);
                updateStatement.executeUpdate();
                System.out.println("Updated JobSheet");
                updateStatement.close();

                ProduceInvoice produceInvoice = new ProduceInvoice();
                Invoice invoice = produceInvoice.produceInvoice(jobNumber);

                String insertQuery = "INSERT INTO Invoice (invoiceNumber, jobNumber, dateOfInvoice, datePaymentDue, grandTotal, labourCost, partCost, status, totalTimeTaken) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";
                PreparedStatement insertStatement = connection.prepareStatement(insertQuery);
                insertStatement.setString(1, invoice.getInvoiceNumber());
                insertStatement.setString(2, invoice.getJobNumber());
                insertStatement.setString(3, invoice.getDateOfInvoice());
                insertStatement.setString(4, invoice.getDatePaymentDue());
                insertStatement.setString(5, invoice.getGrandTotal());
                insertStatement.setString(6, invoice.getLabourCost());
                insertStatement.setString(7, invoice.getPartCost());
                insertStatement.setString(8, invoice.getStatus());
                insertStatement.setString(9, invoice.getTotalTimeTaken());
                insertStatement.executeUpdate();
                
                SaveInvoice saveInvoice = new SaveInvoice();
                saveInvoice.printInvoice(invoice.getInvoiceNumber(), connection);
                
                System.out.println("invoice produced");
            }

            connection.commit();
            connection.setAutoCommit(true);
            checkStatement.close();
            connection.close();

        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("Exception");
        }


    }//GEN-LAST:event_setTaskCompletedButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TasksCompletedForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TasksCompletedForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TasksCompletedForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TasksCompletedForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TasksCompletedForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jobNumberField;
    private javax.swing.JTable jobTaskTable;
    private java.awt.Label label1;
    private javax.swing.JButton refreshTasksButton;
    private javax.swing.JButton searchJobTasksButton;
    private javax.swing.JButton setTaskCompletedButton;
    private javax.swing.JTextField timeTakenField;
    // End of variables declaration//GEN-END:variables
}
